var paths = {},
    Path = require('path');

paths.base = Path.normalize(__dirname);

module.exports = gruntConfig;

function gruntConfig(grunt) {

	var Configuration  = {};
	Configuration.package = grunt.file.readJSON('package.json');

	require('jit-grunt')(grunt, {
		'babel': 'grunt-babel',
		'add_comment': 'grunt-add-comment',
		'mocha': 'grunt-mocha-test'
	});
	require('time-grunt')(grunt);

	var pathOption = getPathOption();

	function getPathOption() {
		var pathOption = false;

		if(grunt.option('path')) {

			pathOption = {};
			pathOption.name = Path.normalize(grunt.option('path')).replace(paths.base, '').slice(1);
			pathOption.extension = Path.extname(grunt.option('path'));
		}

		return pathOption;
	}


	Configuration.babel = {};

	Configuration.babel.dist = {
		options: {
			sourceMap: false
		},
		files: [{
			expand: true,
			cwd: paths.base,
			ext: '.js',
			src: ( pathOption ? pathOption.name : ['lib/**/*.es6','tests/**/*.es6']),
			dest: paths.base
		}]
	};

	Configuration.add_comment = {
		common: {
			options: {
				comments: ['Autogenerated, do not edit. All changes will be undone.'],
				prepend: true,
				syntaxes: {
					'.js': '//'
				}
			},
			files: [{
				expand: true,
				cwd: '',
				src: ( pathOption ? [pathOption.name.replace('.es6', '.js')] :['lib/**/*.js','tests/**/*.js'] ),
				dest: ''
			}]
		}
	};

	Configuration.mochaTest = {
		unit: {
			options: {
				reporter: 'spec',
				timeout: 5000
			},
			src: ['tests/index.js']
		}
	};

	grunt.initConfig(Configuration);

	grunt.registerTask('es6', ['babel:dist', 'add_comment']);
	grunt.registerTask('unit', ['mochaTest:unit']);
}